{
    "collab_server" : "",
    "contents" : "library(data.table)\nlibrary(dplyr)\nlibrary(pROC)\nlibrary(caret)\nlibrary(utils)\nlibrary(lubridate)\nlibrary(doParallel)\n\n#import data\nraw <- read.csv(\"F:/R/kobe/data.csv\", header = TRUE, sep = \",\")\n\n#move the target variable to the last\nraw <- select(raw, -shot_made_flag, everything())\n\nraw$game_event_id <- NULL\nraw$game_id <- NULL\nraw$team_id <- NULL\nraw$team_name <- NULL\nraw$shot_id <- NULL\nraw$matchup <- NULL\nraw$game_date <- NULL\n\n#define data types\nraw$action_type <- factor(raw$action_type, ordered = FALSE)\nraw$combined_shot_type <- factor(raw$combined_shot_type, ordered = FALSE)\nraw$period <- factor(raw$period, ordered = FALSE)\nraw$playoffs <- factor(ifelse(raw$playoffs == 1,\"y\",\"n\"))\nraw$shot_type <- factor(raw$shot_type, ordered = TRUE)\nraw$shot_zone_area <- factor(raw$shot_zone_area, ordered = FALSE)\nraw$shot_zone_basic <- factor(raw$shot_zone_basic, ordered = FALSE)\nraw$shot_zone_range <- factor(raw$shot_zone_range, ordered = FALSE)\nraw$season <- factor(raw$season, ordered= FALSE)\nraw$opponent <- factor(raw$opponent, ordered = FALSE)\n#raw$game_date <- lapply(raw$game_date, ymd)\nraw$shot_made_flag <- factor(ifelse(raw$shot_made_flag == 1,\"y\",\"n\"))\n\n#see the structure\nstr(raw)\n\n\n#split into test and train set\ntrain <- dplyr::filter(raw, !is.na(shot_made_flag))\n\ntest <- dplyr::filter(raw, is.na(shot_made_flag))\n\ntest$shot_made_flag <- NULL\n\n#split train set\nset.seed(1234)\n\nsplitindex <- createDataPartition(train$shot_made_flag, p = 0.7, list = FALSE)\n\ntrain_set <- train[splitindex,]\n\nvalid_set <- train[-splitindex,]\n\n# see if need to balance data\nprint(prop.table(table(train_set$shot_made_flag))*100) #no need\n\n#establish train parameters\ntrain_control <- trainControl(method = \"repeatedcv\",\n                              repeats = 3,\n                              number = 10,\n                              savePredictions = TRUE,\n                              classProbs = TRUE,\n                              summaryFunction = twoClassSummary)\n\n#create model based on different methods:\n#set time\nptm <- proc.time()\n\nset.seed(1045)\n#parallel\ncl <- makeCluster(detectCores())\n\nregisterDoParallel(cl)\n\nmodel <- train(data = train_set,\n               shot_made_flag~.,\n               trControl = train_control,\n               method = \"glmboost\",\n               tuneLength = 5,\n               preProcess = c(\"center\", \"scale\",\"pca\"),\n               allowParallel = TRUE,\n               verbose = TRUE,\n               size = 3,\n               metric = \"ROC\")\n\n#summary model\nsummary(model)\n\n#stop Cluster\nstopCluster(cl)\n\n#stop recording time\ntime <- proc.time() - ptm\n\n#train set performance\nprobs <- predict(model,newdata = train_set, type =\"prob\")\n\npred  <- factor(ifelse(probs[,\"y\"] > 0.5,\"y\",\"n\"))\n\nsummary(pred)\n\nmatrix <- confusionMatrix(data = pred, \n                          train_set$Survived,\n                          positive = levels(train_set$Survived)[2]) %>% \n  print()\n\nrocCurve  <- roc(response = train_set$Survived,\n                 predictor = probs[,\"y\"],\n                 levels = levels(train_set$Survived))\n\ncurve <- plot(rocCurve, print.thres = c(.5), type = \"S\",\n              print.thres.pattern = \"%.3f (Spec = %.2f, Sens = %.2f)\",\n              print.thres.cex = .8,\n              legacy.axes = TRUE)\n\ncurve#AUC\n\n\n",
    "created" : 1465184989505.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "104301846",
    "id" : "77833697",
    "lastKnownWriteTime" : 1465793545,
    "last_content_update" : 1465793545456,
    "path" : "F:/R/kobe/first.R",
    "project_path" : "first.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}