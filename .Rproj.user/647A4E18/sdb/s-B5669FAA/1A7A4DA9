{
    "collab_server" : "",
    "contents" : "library(caret)\nlibrary(MASS)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(utils)\nlibrary(data.table)\nlibrary(doParallel)\nlibrary(pROC)\nlibrary(Amelia)\nlibrary(stringr)\n\n#load file \ntrain <- fread(\"F:/R/Titanic/train.csv\")\n\n#class\nclass(train)\n\n#check missing data\nsum(is.na(train))\n\n#check which collumn has missing data\nmissing <- sapply(train,function(x)sum(is.na(x))) %>% \n  data.table()\n\n#get title from name collumn http://www.txt2re.com/index-python.php3?s=%2C+Mr.&submit=Show+Matches\n# get character between , and .\ntrain[,\"Name\"] <- sapply(train[,\"Name\", with = FALSE],  FUN =function(x) stringr::str_match(x, paste(\"\\\\,.*?\\\\.\",sep=\"\"))[,-2]) %>% \n  data.table()\n#remove  ,\ntrain[,\"Name\"] <- sapply(train[,\"Name\", with = FALSE],  FUN =function(x) stringr::str_replace(x, \"[\\\\W]\" , \" \")) %>% \n  data.table()\n\n\npreProcess<- preProcess(x = train[,c(\"Age\", \"Fare\"), with = FALSE], \n                        method = \"knnImpute\",\n                        na.remove = TRUE,\n                        k = 5,\n                        knnSummary = mean,\n                        outcome = NULL,\n                        fudge = .2,\n                        numUnique = 3)\n\ntrain[,c(\"Age\",\"Fare\")] <- predict(preProcess, \n                                   train[,c(\"Age\",\"Fare\"), \n                                         with = FALSE])\n\n\n\n#remove id table , ticket and cabin and Name\ntrain[,c(\"PassengerId\" ,\"Ticket\" ,\"Cabin\", \"Name\"):= NULL]\n\n#set collum types\ntrain$Survived <- factor(ifelse(train$Survived == 1, \"y\", \"n\"))\ntrain$Pclass <- ordered(train$Pclass, levels = 1:3)\ntrain$Sex <- factor(ifelse(train$Sex == \"male\", \"1\", \"0\"))\nsapply(train[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())\ntrain$Embarked <- factor(train$Embarked, ordered = FALSE)\n\n#deal with NA with amelia\ncol <- colnames(train)\na.out <- amelia(x = train,\n                m = 5,\n                p2s = 1,\n                noms = c(\"Survived\",\"Sex\",\"Embarked\"),\n                ords = \"Pclass\",\n                parallel = \"snow\",\n                empri = 0.5*nrow(train))\n\n#new data\nnew_train <- data.table(a.out$imputations[[1]])\n\n#split trainning set 70:30 ratio\nset.seed(1234)\nsplitindex <- createDataPartition(train$Survived, \n                                  p = 0.7, \n                                  list = FALSE)\ntrain_set <- train[splitindex,]\nvalid_set <- train[-splitindex,]\n\n#data set is balanced\nprint(prop.table(table(train$Survived))*100)\n\n#set up train control\ncontrol <- trainControl(method = \"cv\",\n                        repeats = 3,\n                        number = 10,\n                        verboseIter = TRUE,\n                        savePredictions = TRUE,\n                        summaryFunction = twoClassSummary,\n                        classProbs = TRUE,\n                        allowParallel = TRUE)\n\n\n#create model\n#set time\nptm <- proc.time()\nset.seed(1234)\n\n#parrallel\ncl <- makeCluster(detectCores())\nregisterDoParallel(cl)\n\n#establish model\nmodel <- caret::train(data = train_set,\n                      Survived~.,\n                      method = \"rf\",\n                      #preProcess = c(\"center\",\"scale\",\"pca\"),\n                      na.action = na.omit,\n                      metric = \"ROC\",\n                      trControl = control,\n                      verbose = TRUE,\n                      size = 3,\n                      tuneLength = 5)\n\n#summary model\nsummary(model)\n\n#stop Cluster\nstopCluster(cl)\n\n#stop recording time\ntime <- proc.time() - ptm\n\n#train set performance\nprobs <- predict(model,newdata = train_set, type =\"prob\")\npred  <- factor(ifelse(probs[,\"y\"] > 0.5,\"y\",\"n\"))\nsummary(pred)\nmatrix <- confusionMatrix(data = pred, \n                           train_set$Survived,\n                           positive = levels(train_set$Survived)[2]) %>% \n  print()\nrocCurve  <- roc(response = train_set$Survived,\n                  predictor = probs[,\"y\"],\n                  levels = levels(train_set$Survived))\ncurve <- plot(rocCurve, print.thres = c(.5), type = \"S\",\n                print.thres.pattern = \"%.3f (Spec = %.2f, Sens = %.2f)\",\n                print.thres.cex = .8,\n                legacy.axes = TRUE)\ncurve#AUC\n\n\n#valid_set performance\nprobs_1 <- predict(model,newdata = valid_set, type =\"prob\")\npred_1  <- factor(ifelse(probs_1[,\"y\"] > 0.5,\"y\",\"n\"))\nsummary(pred_1)\nlevels(valid_set$Survived)\nmatrix_1 <- confusionMatrix(data = pred_1, \n                            valid_set$Survived,\n                            positive = levels(valid_set$Survived)[2]) %>% \n  print()\n\nrocCurve_1  <- roc(response = valid_set$Survived,\n                   predictor = probs_1[,\"y\"],\n                   levels = levels(valid_set$Survived))\ncurve_1 <- plot(rocCurve_1, print.thres = c(.25), type = \"S\",\n               print.thres.pattern = \"%.3f (Spec = %.2f, Sens = %.2f)\",\n               print.thres.cex = .8,\n               legacy.axes = TRUE)\ncurve_1\n\n#test set\ntest <- fread(\"F:/R/Titanic/test.csv\")\npasid <- test[,\"PassengerId\", with = FALSE]\n\n#remove id table , ticket and cabin and Name\ntest[,c(\"PassengerId\" ,\"Ticket\" ,\"Cabin\", \"Name\"):= NULL]\n\n#set collum types\ntest$Pclass <- ordered(test$Pclass, levels = 1:3)\ntest$Sex <- factor(ifelse(test$Sex == \"male\", \"1\", \"0\"))\nsapply(test[,.(SibSp,Age,Parch,Fare)], function(x) as.numeric())\ntest$Embarked <- factor(test$Embarked, ordered = FALSE)\n\n#missing values\npreProcess<- preProcess(x = test[,c(\"Age\", \"Fare\"), with = FALSE], \n                        method = \"knnImpute\",\n                        na.remove = TRUE,\n                        k = 5,\n                        knnSummary = mean,\n                        outcome = NULL,\n                        fudge = .2,\n                        numUnique = 3)\ntest[,c(\"Age\",\"Fare\")] <- predict(preProcess, test[,c(\"Age\",\"Fare\"), with = FALSE])\n\n#predict\ntest_pred <- predict(model,\n                     newdata = test,\n                     type = \"prob\")\n\nprediction <- factor(ifelse(test_pred[,\"y\"]>0.5,\"1\",\"0\")) %>% \n  data.table()\n\nfinal <- cbind(pasid,prediction)  \ncolnames(final) <- c(\"PassengerID\",\"Survived\")\n\n#final file\nwrite.csv(final,\"F:/R/Titanic/gendermodel.csv\")\n\n",
    "created" : 1465793258697.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1903308132",
    "id" : "1A7A4DA9",
    "lastKnownWriteTime" : 1465142914,
    "last_content_update" : 1465142914,
    "path" : "F:/R/Titanic/draft_1.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}