repeats = 3,
number = 10,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glmboost",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
allowParallel = TRUE,
verbose = TRUE,
size = 3,
metric = "ROC")
# #summary model
rm(list=ls())
source('~/.active-rstudio-document')
#import data
raw <- read.csv("/Users/matt/Documents/kobe/data.csv", header = TRUE, sep = ",")
#move the target variable to the last
raw <- select(raw, -shot_made_flag, everything())
raw$game_event_id <- NULL
raw$game_id <- NULL
raw$team_id <- NULL
raw$team_name <- NULL
raw$shot_id <- NULL
raw$matchup <- NULL
raw$game_date <- NULL
raw$action_type <- NULL
#define data types
raw$action_type <- factor(raw$action_type, ordered = FALSE)
raw$combined_shot_type <- factor(raw$combined_shot_type, ordered = FALSE)
raw$period <- factor(raw$period, ordered = FALSE)
raw$playoffs <- factor(ifelse(raw$playoffs == 1,"y","n"))
raw$shot_type <- factor(raw$shot_type, ordered = TRUE)
raw$shot_zone_area <- factor(raw$shot_zone_area, ordered = FALSE)
raw$shot_zone_basic <- factor(raw$shot_zone_basic, ordered = FALSE)
raw$shot_zone_range <- factor(raw$shot_zone_range, ordered = FALSE)
raw$season <- factor(raw$season, ordered= FALSE)
raw$opponent <- factor(raw$opponent, ordered = FALSE)
#raw$game_date <- lapply(raw$game_date, ymd)
raw$shot_made_flag <- factor(ifelse(raw$shot_made_flag == 1,"y","n"))
#see the structure
str(raw)
#dummy-vised
dummies <- dummyVars(data = raw, shot_made_flag ~ .)
dummies2 <- predict(dummies, newdata = raw) %>%
data.table()
done <- cbind.data.frame(dummies2, raw$shot_made_flag)
#split into test and train set
train <- dplyr::filter(done, !is.na(V2))
test <- dplyr::filter(done, is.na(V2))
test$V2 <- NULL
#split train set
set.seed(1234)
splitindex <- createDataPartition(train$V2, p = 0.7, list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
# see if need to balance data
print(prop.table(table(train_set$V2))*100) #no need
#establish train parameters
train_control <- trainControl(method = "none",
repeats = 3,
number = 10,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glmboost",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
allowParallel = TRUE,
verbose = TRUE,
size = 3,
metric = "ROC")
# #summary model
# summary(model)
#
# #stop Cluster
# stopCluster(cl)
#
# #stop recording time
# time <- proc.time() - ptm
# #train set performance
# probs <- predict(model,newdata = train_set, type ="prob")
#
# pred  <- factor(ifelse(probs[,"y"] > 0.5,"y","n"))
#
# summary(pred)
#
# matrix <- confusionMatrix(data = pred,
#                           train_set$Survived,
#                           positive = levels(train_set$Survived)[2]) %>%
#   print()
#
# rocCurve  <- roc(response = train_set$Survived,
#                  predictor = probs[,"y"],
#                  levels = levels(train_set$Survived))
#
# curve <- plot(rocCurve, print.thres = c(.5), type = "S",
#               print.thres.pattern = "%.3f (Spec = %.2f, Sens = %.2f)",
#               print.thres.cex = .8,
#               legacy.axes = TRUE)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glmboost",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
allowParallel = TRUE,
verbose = TRUE,
size = 3,
metric = "ROC")
#establish train parameters
train_control <- trainControl(method = "none",
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glmboost",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
allowParallel = TRUE,
verbose = TRUE,
size = 3,
metric = "ROC")
establish train parameters
train_control <- trainControl(method = "none",
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glm",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
allowParallel = TRUE,
verbose = TRUE,
size = 3,
metric = "ROC")
#import data
raw <- read.csv("/Users/matt/Documents/kobe/data.csv", header = TRUE, sep = ",")
#move the target variable to the last
raw <- select(raw, -shot_made_flag, everything())
raw$game_event_id <- NULL
raw$game_id <- NULL
raw$team_id <- NULL
raw$team_name <- NULL
raw$shot_id <- NULL
raw$matchup <- NULL
raw$game_date <- NULL
raw$action_type <- NULL
#define data types
raw$action_type <- factor(raw$action_type, ordered = FALSE)
raw$combined_shot_type <- factor(raw$combined_shot_type, ordered = FALSE)
raw$period <- factor(raw$period, ordered = FALSE)
raw$playoffs <- factor(ifelse(raw$playoffs == 1,"y","n"))
raw$shot_type <- factor(raw$shot_type, ordered = TRUE)
raw$shot_zone_area <- factor(raw$shot_zone_area, ordered = FALSE)
raw$shot_zone_basic <- factor(raw$shot_zone_basic, ordered = FALSE)
raw$shot_zone_range <- factor(raw$shot_zone_range, ordered = FALSE)
raw$season <- factor(raw$season, ordered= FALSE)
raw$opponent <- factor(raw$opponent, ordered = FALSE)
#raw$game_date <- lapply(raw$game_date, ymd)
raw$shot_made_flag <- factor(ifelse(raw$shot_made_flag == 1,"y","n"))
#see the structure
str(raw)
#dummy-vised
dummies <- dummyVars(data = raw, shot_made_flag ~ .)
dummies2 <- predict(dummies, newdata = raw) %>%
data.table()
done <- cbind.data.frame(dummies2, raw$shot_made_flag)
#split into test and train set
train <- dplyr::filter(done, !is.na(V2))
test <- dplyr::filter(done, is.na(V2))
test$V2 <- NULL
#split train set
set.seed(1234)
splitindex <- createDataPartition(train$V2, p = 0.7, list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
# see if need to balance data
print(prop.table(table(train_set$V2))*100) #no need
#establish train parameters
train_control <- trainControl(method = "none",
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "glm",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
verbose = TRUE,
size = 3,
metric = "ROC")
source('~/Documents/kobe/Untitled.R')
library(data.table)
library(dplyr)
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
#import data
raw <- read.csv("/Users/matt/Documents/kobe/data.csv", header = TRUE, sep = ",")
#move the target variable to the last
raw <- select(raw, -shot_made_flag, everything())
raw$game_event_id <- NULL
raw$game_id <- NULL
raw$team_id <- NULL
raw$team_name <- NULL
raw$shot_id <- NULL
raw$matchup <- NULL
raw$game_date <- NULL
raw$action_type <- NULL
#define data types
raw$action_type <- factor(raw$action_type, ordered = FALSE)
raw$combined_shot_type <- factor(raw$combined_shot_type, ordered = FALSE)
raw$period <- factor(raw$period, ordered = FALSE)
raw$playoffs <- factor(ifelse(raw$playoffs == 1,"y","n"))
raw$shot_type <- factor(raw$shot_type, ordered = TRUE)
raw$shot_zone_area <- factor(raw$shot_zone_area, ordered = FALSE)
raw$shot_zone_basic <- factor(raw$shot_zone_basic, ordered = FALSE)
raw$shot_zone_range <- factor(raw$shot_zone_range, ordered = FALSE)
raw$season <- factor(raw$season, ordered= FALSE)
raw$opponent <- factor(raw$opponent, ordered = FALSE)
#raw$game_date <- lapply(raw$game_date, ymd)
raw$shot_made_flag <- factor(ifelse(raw$shot_made_flag == 1,"y","n"))
#see the structure
str(raw)
#dummy-vised
dummies <- dummyVars(data = raw, shot_made_flag ~ .)
dummies2 <- predict(dummies, newdata = raw) %>%
data.table()
done <- cbind.data.frame(dummies2, raw$shot_made_flag)
#split into test and train set
train <- dplyr::filter(done, !is.na(V2))
test <- dplyr::filter(done, is.na(V2))
test$V2 <- NULL
#split train set
set.seed(1234)
splitindex <- createDataPartition(train$V2, p = 0.7, list = FALSE)
train_set <- train[splitindex,]
valid_set <- train[-splitindex,]
# see if need to balance data
print(prop.table(table(train_set$V2))*100) #no need
#establish train parameters
train_control <- trainControl(method = "none",
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary)
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "rf",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
verbose = TRUE,
size = 3,
metric = "ROC")
?trainControl
#establish train parameters
train_control <- trainControl(method = "adaptive_cv",
number = 5,
repeats = 2,
savePredictions = TRUE,
classProbs = TRUE,
summaryFunction = twoClassSummary,
verboseIter = TRUE,
returnResamp = "none",
search = "random")
#create model based on different methods:
#set time
ptm <- proc.time()
set.seed(1045)
# #parallel
# cl <- makeCluster(detectCores())
#
# registerDoParallel(cl)
model <- train(data = train_set,
V2~.,
trControl = train_control,
method = "rf",
tuneLength = 5,
preProcess = c("center", "scale","pca"),
verbose = TRUE,
size = 3,
metric = "ROC")
library(shiny); print(source('shiny.R')$value)
source('~/Documents/kobe/EDA.R', echo=TRUE)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
save(raw, file = "/Users/matt/Documents/kobe/raw.rda")
load(raw, file = "/Users/matt/Documents/kobe/raw.rda")
load(raw, file ="/Users/matt/Documents/kobe/raw.rda")
load(raw)
print(source('shiny.R')$value)
?renderUI
print(source('shiny.R')$value)
print(source('shiny.R')$value)
source(shiny.R)
source('shiny.R')
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
library(ggplot2)
library(grid)
library(jpeg)
library(RCurl)
source('~/Documents/kobe/EDA.R', echo=TRUE)
?rasterGrob
library(RCurl)
library(grid)
print(source('shiny.R')$value)
library(RCurl)
library(grid)
library(data.table)
library(dplyr)
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
library(ggplot2)
library(grid)
library(jpeg)
library(RCurl)
print(source('shiny.R')$value)
load("raw.rda")
shinyAppDir("shiny.R")
print(source('shiny.R')$value)
print(source('shiny.R')$value)
source('~/Documents/kobe/EDA.R', echo=TRUE)
print(source('shiny.R')$value)
raw[,"year"]
print(source('shiny.R')$value)
raw[22]
raw[25]
raw[26]
unique(raw[26])
library(data.table)
library(dplyr)
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
library(ggplot2)
library(grid)
library(jpeg)
library(RCurl)
#create short chart for kobe
court_img <- "http://robslink.com/SAS/democd54/nba_court_dimensions.jpg"
court <- rasterGrob(readJPEG(getURLContent(court_img)),
width=unit(1,"npc"), height=unit(1,"npc"))
ui <- fluidPage(
titlePanel("Kobe Bryant's Short Chart"),
sidebarLayout(
sidebarPanel(
selectInput("year",
label = h3("Select Year"),
choices = unique(raw[26]))),
mainPanel("Kobe's Short Chart based on selected year",
plotOutput("shortchart"))
)
)
server <- function(input, output){
#react to changes in input
react <- reactive({
sub <- subset(raw, year == input$year)
ggplot(sub, aes(x=loc_x, y=loc_y)) +
annotation_custom(court, -250, 250, -50, 420) +
geom_point(aes(colour = shot_zone_basic, shape = shot_made_flag)) +
xlim(-250, 250) +
ylim(-50, 420)
})
output$shortchart <-renderPlot({
react()
})
}
shinyApp(server = server, ui = ui)
unique(raw[26])
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
sub <- filter(raw, year == 2010)
View(sub)
dplyr::filter(raw, year == input$year)
dplyr::filter(raw, year == 2010)
library(base)
library(stats)
library(data.table)
library(plyr)
library(dplyr)
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
library(ggplot2)
library(grid)
library(jpeg)
library(RCurl)
library(base)
library(stats)
library(data.table)
library(plyr)
library(dplyr)
library(pROC)
library(caret)
library(utils)
library(lubridate)
library(doParallel)
library(ggplot2)
library(grid)
library(jpeg)
library(RCurl)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
?subset
print(source('shiny.R')$value)
print(source('shiny.R')$value)
?source
print(source('shiny.R')$value)
print(source('shiny.R')$value)
shinyAppFile("/Users/matt/Documents/kobe/shiny.R")
update.packages("Rmarkdown")
update.packages("rmarkdown")
library(shiny); print(source('shiny.R')$value)
conflicts()
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
```{r, echo=FALSE, warning=TRUE}
shinyAppFile("/Users/matt/Documents/kobe/shiny.R")
```{r, echo=FALSE, warning=TRUE}
shinyAppFile("/Users/matt/Documents/kobe/shiny.R")
devtools::install_github("wch/webshot")
print(source('shiny.R')$value)
?selectInput
?select.list
?sliderInput
unique(min(raw$year))
print(source('shiny.R')$value)
print(source('shiny.R')$value)
print(source('shiny.R')$value)
